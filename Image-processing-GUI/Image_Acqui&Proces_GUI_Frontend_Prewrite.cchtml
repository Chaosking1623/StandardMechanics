<h1 style="text-align: center;">Image Acquisition/Processing GUI Frontend
    Prewrite</h1>
<h2 style="text-align: center;">Create New GUI that combines the Image
    Acquisition and Image Processing GUIs</h2>
<p>This GUI is made from running Python code. This code requires the python
    environment&nbsp;<a
        href="https://github.com/TomSchimansky/CustomTkinter">CustomTkinter</a>
    to be pip installed. This link is to the creator of CustomTkinter's Github
    which contains all of the tutorials and examples you need regarding the
    environment. Here is a direct <a
        href="https://github.com/TomSchimansky/CustomTkinter/wiki">link</a> to
    the functions that you may use. Also, the example with the most useful
    information we found was <a
        href="https://github.com/TomSchimansky/CustomTkinter/blob/master/examples/complex_example.py">complex_example.py</a>.
    This has the radio buttons and other widgets that you may need to add as
    seen in the Image Acquisition GUI Mock-up (Figure 2) below.</p>
<p>The goal of this project is to create a new GUI for the camera device at <a
        href="https://standardmechanics.com/">Standard Mechanics</a>. The New
    GUI will use the Old Image Processing GUI (Figure 1) as the base on
    startup. The updated functions of the Image Acquisition GUI Mock-up will be
    accessible from a button click on the New GUI.&nbsp;&nbsp;</p>
<p>Keep in mind, the code from the old LEAP.py (Figure 1) uses the environments
    found in requirements.txt, which is found in the Image-processing-GUI
    folder in the StandardMechanics Github. As of 4/11/2023, the code of
    New_GUI_LEAP.py only needs the tkinter and customtkinter environments.</p>
<table
    style="border-collapse: collapse; width: 100%; height: 367.6px; border-width: 1px;"
    border="1">
    <colgroup>
        <col style="width: 50.0199%;">
        <col style="width: 50.0199%;">
    </colgroup>
    <tbody>
        <tr style="height: 367.6px;">
            <td style="height: 367.6px; border-width: 1px;">
                <p style="text-align: center;"><strong>Old Image Processing
                        GUI</strong></p>
                <p style="text-align: center;"><strong><img
                            title="Old Image Processing GUI" src="LEAP.png"
                            alt="" width="500" height="300"></strong></p>
                <p style="text-align: center;">&nbsp;</p>
                <p style="text-align: center;"><strong>Figure 1</strong></p>
            </td>
            <td style="height: 367.6px; border-width: 1px;">
                <p style="text-align: center;"><strong>Image Acquisition GUI
                        Mock-up</strong></p>
                <p style="text-align: center;"><strong><img title="GUI mock-up"
                            src="GUI_mockup.png" width="500"
                            height="300"></strong></p>
                <p style="text-align: center;"><strong>Figure 2</strong></p>
            </td>
        </tr>
    </tbody>
</table>
<p style="text-align: center;"><strong>New Image Acquisition/Processing GUI
        Prototype</strong></p>
<p style="text-align: center;"><img title="Image Processing"
        src="Current_GUI_1.jpg" width="559" height="164"></p>
<p style="text-align: center;">The GUI above needs an image between the
    "Calibrate Dist" and "White Level" to push the columns apart.</p>
<p style="text-align: center;">Both GUIs have yet to add all widgets needed.
</p>
<p style="text-align: center;"><img title="Image Acquisition"
        src="Current_GUI_2.jpg" width="731" height="133"></p>
<h2>Helpful Tips:</h2>
<p>GUIs built using tkinter revolves around placing widgets on a grid. Below is
    an example of a grid with widgets (found in this <a
        href="https://www.pythonguis.com/tutorials/create-ui-with-tkinter-grid-layout-manager/">link</a>).
    Let's say a widget is place on column 1 and another widget is placed on
    column 5, however, there aren't any widgets placed on the columns between.
    This will cause columns 2, 3, &amp; 4 to collapse and columns 1 &amp; 5
    will come together. The customtkinter Github has some examples that uses
    rowspan and columnspan to help fill gaps as you see below for Widget 2, 3,
    and more.</p>
<p><img style="display: block; margin-left: auto; margin-right: auto;"
        title="Widget Guide" src="Widget_Guide.png"></p>
<h2>Notes of New GUI:</h2>
<p><span style="text-decoration: underline;"><strong>4/5/2023</strong></span>
</p>
<p>The new GUI file is called New_GUI_LEAP.py and can be found in the
    Image-processing folder of the StandardMechanics Github.</p>
<p>&nbsp;</p>
<p><span style="font-size: 18pt;"><strong>Progress Logs:</strong></span></p>
<table style="border-collapse: collapse; width: 84.3238%; height: 309px;"
    border="1">
    <colgroup>
        <col style="width: 9.00024%;">
        <col style="width: 15.4464%;">
        <col style="width: 17.6356%;">
        <col style="width: 24.8115%;">
        <col style="width: 22.1357%;">
        <col style="width: 10.9462%;">
    </colgroup>
    <tbody>
        <tr style="height: 24.825px;">
            <td style="text-align: center; height: 24.825px;">
                <strong>Date</strong></td>
            <td style="text-align: center; height: 24.825px;">
                <strong>Developer</strong></td>
            <td style="text-align: center; height: 24.825px;">
                <strong>Contact</strong></td>
            <td style="text-align: center; height: 24.825px;">
                <strong>Description</strong></td>
            <td style="text-align: center;"><strong>To Do</strong></td>
            <td style="text-align: center;"><strong>Notes</strong></td>
        </tr>
        <tr style="height: 46.375px;">
            <td style="text-align: center; height: 46.375px;">4/6/2023</td>
            <td style="text-align: center; height: 46.375px;">Kaishu Thomas
            </td>
            <td style="text-align: center; height: 46.375px;">
                knt192@msstate.edu</td>
            <td style="text-align: center; height: 46.375px;">New_GUI has two
                frames that can be swapped using a button press&nbsp;</td>
            <td style="text-align: center;">
                <p>Place an image widget in the GUI</p>
                <p>Add other buttons and their functions on both Frames</p>
                <p>General widget placement changes if necessary</p>
            </td>
            <td style="text-align: center;">
                <p>The GUI may appear collapsed, this is due a picture being
                    needed between certain widgets.&nbsp;</p>
            </td>
        </tr>
    </tbody>
</table>
<p>&nbsp;</p>
<h2>Temporary Section - Transition team response (04.11.23) [K. Farrar and M.
    Nguyen]</h2>
<p>Note: This new section has been created to stage notes ready for the
    transition to new team members, Michael Nguyen and Kyler Farrar. Below are
    the response for the following sprint required for project 2 task.&nbsp;
</p>
<p>&nbsp;</p>
<p><strong>Project 2 task description, provide a detailed plan and posted as
        prewriting in a readme.cchtml or similar file of the relevant
        repository in Github, that:</strong></p>
<p>1. Describes the feature you will add.&nbsp;We want to add the following
    features to this project:</p>
<p>&nbsp; &nbsp;A. Update the ReadMe.cchtml with hyperlinks to include: a
    section in Table of Content, requirement.txt, Leap.py, New_Leap.py.</p>
<p>&nbsp; &nbsp;B. We will include a scope of work section in the pre-writing
    to identify the customer requirements</p>
<p>&nbsp; &nbsp;C. New_GUI_Leap.py compiles and executes without any errors.
    Leap.py does not compiles and is missing files. Resolve issues to compile
    old GUI.</p>
<p>&nbsp; &nbsp;D. Add header to New_GUI_Leap to address copyright and limited
    distribution.</p>
<p>&nbsp;</p>
<p>2. Defines which repository/repositories your code will be added to.</p>
<p>We will maintain a similar cadence as done for the Initialize Camera
    Project. We plan to publish our changes within the mpn21 (Michael Nguyen)
    GitHub account.&nbsp;</p>
<p>&nbsp;</p>
<p>3. Specifies what libraries, languages, and interfaces your code must work
    with.</p>
<p>The programming language utilized in this project is Python and possibly C#.
    Python programming language is used to review the old GUI (Leap.py) and
    design a new GUI for our customer, Standard Mechanics. Moreover, C#
    interfaces with Sapera frame grabber SDK to acquire camera imagery function
    calls. As a result, becoming familiar with C# may be required for this
    project. The libraries involved in this project are tkinter, CustomTkinter,
    and possibly Sapera SDK. In addition, Requirements.txt contained a list of
    libraries identified for this project. &nbsp;</p>
<p>Libraries identified within requirements.txt:</p>
<pre>contourpy==1.0.7
customtkinter==5.1.2
cycler==0.11.0
darkdetect==0.8.0
fonttools==4.38.0
kiwisolver==1.4.4
matplotlib==3.7.0
numpy==1.24.2
opencv-python==4.7.0.68
packaging==23.0
pandas==1.5.3
Pillow==9.4.0
pyparsing==3.0.9
python-dateutil==2.8.2
pytz==2022.7.1
scipy==1.10.1
six==1.16.0<br><br></pre>
<p>4. Details a series of steps you will follow to complete this feature.</p>
<p>The steps to complete 1.A requires updating the pre-writing file and table
    of contents.&nbsp;</p>
<p>The steps to complete 1.B requires meeting with the previous team/customer
    identify scope of work</p>
<p>The steps to complete 1.C requires meeting with the previous team/customer
    about the importance of each image file, such as logo and dialogue boxes
    for printout statements.</p>
<p>The steps to complete 1.D would be to modify the Standard Mechanics header
    file from LEAP.py</p>
<p>&nbsp;</p>
<p>5. Defines tests to show the feature works correctly.</p>
<p>Tests will not be required to validate features 1.A, 1.B and 1.D because
    these features can be verified by observation. Moreover, the feature
    identified in step 1.C would require the Python code to compile if the old
    GUI is deemed necessary.&nbsp;</p>
<p>&nbsp;</p>
<p>6. Outlines goals for the draft pull request and final pull request.</p>
<p>The goals for the draft pull request and final pull request to update will
    be provided after the scope of work for this project is defined. &nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>&nbsp;</p>
